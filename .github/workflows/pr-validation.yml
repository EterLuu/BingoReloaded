name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Increase timeout for Paper setup

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle Wrapper
      run: |
        # Check if gradle-wrapper.jar exists, if not download it
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR missing, downloading..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.14.0/gradle/wrapper/gradle-wrapper.jar
        fi
        chmod +x gradlew

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v2

    - name: Run checkstyle (if configured)
      run: ./gradlew checkstyleMain checkstyleTest || echo "Checkstyle not configured, skipping..."
      continue-on-error: true

    - name: Compile code
      run: ./gradlew compileJava compileTestJava

    - name: Run tests
      run: ./gradlew test

    - name: Test shadow JAR creation
      run: ./gradlew shadowJar

    - name: Check for build warnings
      run: |
        echo "Build completed successfully!"
        if ./gradlew build --warning-mode all 2>&1 | grep -i "warning"; then
          echo "⚠️ Build completed with warnings"
        else
          echo "✅ Build completed without warnings"
        fi

    - name: Comment PR with build status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Build Status')
          );
          
          const body = `## 🔨 Build Status
          
          ✅ **Build successful!** 
          
          - Java compilation: ✅ 
          - Tests: ✅ 
          - Shadow JAR: ✅
          
          The PR is ready for review.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }